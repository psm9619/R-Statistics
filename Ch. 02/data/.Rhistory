pch=1, col="red")
par(mfrow=c(1,2))
plot (cars$speed, cars$dist,
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
plot (jitter(cars$speed), jitter(cars$dist),
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
# 기술통계학
# 1. 그래프
# 산점도
# 가장 먼저 그려서 전체적인 분산도를 알아보기 위한 기본 그래프
library(ggplot2)
cars
par(mfrow=c(1,2))
plot (cars$speed, cars$dist,
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
plot (jitter(cars$speed), jitter(cars$dist),
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
library(ggplot2)
cars
par(mfrow=c(1,2))
plot (cars$speed, cars$dist,
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
plot (jitter(cars$speed), jitter(cars$dist),
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
# 2. 시계열 그래프
Nile
plot(Nile, main="Nile 강의 연도별 유랑 변화",
xlab = "연도", ylab="유량")
plot(Nile, type = 'p',
main="Nile 강의 연도별 유랑 변화",
xlab = "연도", ylab="유량")
# ggplot 으로 그리려 할 때는?
# 주의점: ggplot 은 data frame 만 받는다.
class(Nile)
data.frame(Y=as.matrix(Nile), date=time(Nile))
data.frame(date=time(Nile), Nile=as.matrix(Nile))
N <- data.frame(date=time(Nile),
Nile=as.matrix(Nile))
ggplot(N, aes(x=date, y=Nile)) +
geom_line()
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화", xlab="연도", ylab="유량")
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화",
x ="연도", y="유량")
# conversion: data.frame(x = time(ts dataset), y= as.matrix (ts dataset))
N <- data.frame(연도=time(Nile),
유량 =as.matrix(Nile))
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화",
x ="연도", y="유량") +
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화") +
theme_bw()
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화") +
theme_bw()
N <- data.frame(연도=time(Nile),
유량 =as.matrix(Nile))
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화") +
theme_bw()
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화")
# conversion: data.frame(x = time(ts dataset), y= as.matrix (ts dataset))
N <- data.frame(연도=time(Nile),
유량 =as.matrix(Nile))
ggplot(N, aes(x=date, y=Nile)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화")
ggplot(N, aes(x=연도, y=유량)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화")
ggplot(N, aes(x=연도, y=유량)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화") +
theme_bw()
df_nile <- as.data.frame(Nile)
df_nile
time(Nile)
data <- read.csv("2010 인구사항.csv", header=F, na.strings=c("."))
str(data)
data$V1 <- factor(data$V1, levels =c(1,2),
labels = c("남자", "여자"))
data$V3 <- factor(data$V3, levels = 1:14,
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"형제자매의 자녀, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
data$V4 <- factor(data$V4, levels = 1:8,
labels = c("안 받았음", "초등학교", "중학교",
"고등학교", "대학~4년제 미만",
"대학~4년제 이상", "석사과정", "박사과정"))
str(data)
save.image("data.rda")
pop <- read.csv("2010 인구사항.csv", header=F, na.strings=c("."))
str(pop)
pop$V1 <- factor(data$V1, levels =c(1,2),
labels = c("남자", "여자"))
pop <- read.csv("2010 인구사항.csv", header=F, na.strings=c("."))
str(pop)
pop$V1 <- factor(pop$V1, levels =c(1,2),
labels = c("남자", "여자"))
pop$V3 <- factor(pop$V3, levels = 1:14,
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"형제자매의 자녀, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
pop$V4 <- factor(pop$V4, levels = 1:8,
labels = c("안 받았음", "초등학교", "중학교",
"고등학교", "대학~4년제 미만",
"대학~4년제 이상", "석사과정", "박사과정"))
str(pop)
save.image("pop.rda")
# 3. 막대그래프와 히스토그램
# 막대 : 높이에 초점 vs. 히스토 : 넓이에 초점
pop
# 3. 막대그래프와 히스토그램
# 막대 : 높이에 초점 vs. 히스토 : 넓이에 초점
head(pop)
str(pop)
pop
# 3. 막대그래프와 히스토그램
# 막대 : 높이에 초점 vs. 히스토 : 넓이에 초점
head(pop) ; tail(pop)  # 현재 파일 가장 밑단에 있는 2010 인구사항 데이터 셋을 정리, 받은 것
tableV5 <- pop$V5
tableV5
barplot(tableV5, main="출생아", xlab = "출생아수", ylab="빈도")
# 3. 막대그래프와 히스토그램
# 막대 : 높이에 초점 vs. 히스토 : 넓이에 초점
head(pop) ; tail(pop)  # pop: 2010 인구사항 데이터 셋을 정리, 받은 것
tableV5 <- pop$V5
tableV5
barplot(tableV5, main="출생아", xlab = "출생아수", ylab="빈도")
# 3. 막대그래프와 히스토그램
# 막대 : 높이에 초점 vs. 히스토 : 넓이에 초점
load("pop.rda")
tableV5 <- pop$V5
# 기술통계학
# 기술함으로써 설명. 이 때 기술은 글/말 이 아닌 그래프 등 시각적 설명
# ------------------------------------------------------------------
# 그래프
# 1. 산점도
# 가장 먼저 그려서 전체적인 분산도를 알아보기 위한 기본 그래프
library(ggplot2)
cars
par(mfrow=c(1,2))
plot (cars$speed, cars$dist,
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
# jitter 은 비슷한 x,y 값에 여러 값이 모일 경우
#그것들의 x 값 위치를 살짝 흔들어서 지나친 겹침을 방지.
# plot(jitter(x), jitter(y)...)  또는 (ggplot 사용시) geom_jitter()
plot (jitter(cars$speed), jitter(cars$dist),
main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)",
pch=1, col="red")
# 2. 시계열 그래프 Time Series
Nile
plot(Nile,
type = 'p',  # type = 'p' 로 놓으면 산점도식 그래프를 그려내는데 이것으로는 알고자 하는 내용을 파악할 수 없는, 단순 분산도가 나옴.
main="Nile 강의 연도별 유랑 변화",
xlab = "연도", ylab="유량")
# 따라서 시간의 규칙적 변화에 따른 특정 데이터의 변화 Time series 를 알고자 할 때는
# 해당자료에 맞게 시계열 그래프를 그려야 한다. 이 때는 특별한 함수 등 필요없이 데이터만 잘 정리되어있으면 자동으로 그려짐.
plot(Nile, main="Nile 강의 연도별 유랑 변화",
xlab = "연도", ylab="유량")
# ggplot 으로 그리려 할 때는?
# 주의: ggplot 은 data frame 만 받는다.
class(Nile) # ts (time series) 타입
# conversion: data.frame(x = time(ts dataset), y= as.matrix (ts dataset))
N <- data.frame(연도=time(Nile),
유량 =as.matrix(Nile))
ggplot(N, aes(x=연도, y=유량)) +
geom_line() +
labs(title="Nile 강의 연도별 유랑 변화") +
theme_bw()
time(Nile)
# 3. 막대그래프와 히스토그램
# 막대 : 높이에 초점 vs. 히스토 : 넓이에 초점
load("pop.rda")
head(pop) ; tail(pop)  # pop: 2010 인구사항 데이터 셋을 정리, 받은 것
tableV5 <- pop$V5
tableV5
barplot(tableV5, main="출생아",
xlab = "출생아수", ylab="빈도")
pop <- read.csv("2010 인구사항.csv", header=F, na.strings=c("."))
str(pop)
pop$V1 <- factor(pop$V1, levels =c(1,2),
labels = c("남자", "여자"))
pop$V3 <- factor(pop$V3, levels = 1:14,
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"형제자매의 자녀, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
pop$V4 <- factor(pop$V4, levels = 1:8,
labels = c("안 받았음", "초등학교", "중학교",
"고등학교", "대학~4년제 미만",
"대학~4년제 이상", "석사과정", "박사과정"))
str(pop)
save.image("pop.rda")
load("pop.rda")
head(pop) ; tail(pop)  # pop: 2010 인구사항 데이터 셋을 정리, 받은 것
tableV5 <- pop$V5
tableV5
barplot(tableV5, main="출생아",
xlab = "출생아수", ylab="빈도")
# 히스토그램
hist(pop$V2, main="연령별 분포", xlab = "연령", ylab="빈도")
par(mfrow=c(1,1))
load("pop.rda")
head(pop) ; tail(pop)  # pop: 2010 인구사항 데이터 셋을 정리, 받은 것
tableV5 <- pop$V5
tableV5
barplot(tableV5, main="출생아",
xlab = "출생아수", ylab="빈도")
barplot(tableV5, main="출생아",
xlab = "출생아수", ylab="빈도")
head(pop) ; tail(pop)  # pop: 2010 인구사항 데이터 셋을 정리, 받은 것
# 히스토그램
hist(pop$V2, main="연령별 분포", xlab = "연령", ylab="빈도")
hist(pop$V2, breaks=c(seq(0,90,10)), right=F,
main="연령별 분포", xlab="연령", ylab="빈도")
barplot(tableV5, main="출생아(남자)별 빈도",
xlab = "출생아수", ylab="빈도")
tableV5
# 막대그래프
tableV5 <- table(pop$V5)
tableV5
barplot(tableV5, main="출생아(남자)별 빈도",
xlab = "출생아수", ylab="빈도")
hist(pop$V2, breaks=c(seq(0,90,10)), # 계급구간 customizing
right=F,
main="연령별 분포", xlab="연령", ylab="빈도")
hist(pop$V2, breaks=c(seq(0,90,10)), # 계급구간 customizing
right=F,  # right-closed = F -> 각 구간은 [a,b) 로 오른쪽구간이 열림 (default 는 (a,b] 형태이다)
main="연령별 분포", xlab="연령", ylab="빈도")
# 원 도표
pie(pop$V4,  main= "학력수준별 비중")
# 원 도표
pie(table(pop$V4), main= "학력수준별 비중")
table(pop$V4)
pie(table(pop$V4), main= "학력수준별 비중",
cex = 0.5)
pie(table(pop$V4), main= "학력수준별 비중",
cex = 0.8)
pie(table(pop$V4), main= "학력수준별 비중",
cex = 1)
pie(table(pop$V4), main= "학력수준별 비중",
cex = 0.8)
pie(table(pop$V4), main= "학력수준별 비중",
cex = 0.8)  # 각 label 의 글자 크기
coffee <- read.csv("cafedata.csv", header=T)
head(coffee)
# 모수와 통계량
coffee <- read.csv("cafedata.csv", header=T)
head(coffee)
setwd("D:/Workspace/R_Statistics/Ch. 02/data")
str(coffee)
# 모수와 통계량
ranicafe <- read.csv("cafedata.csv", header=T)
head(ranicafe)
str(ranicafe)
sort(ranicafe)
head(ranicafe)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
cof <- sort(ranicafe$Coffees)
cof[1]
cof <- sort(ranicafe$Coffees, decreasing=T)
cof[1]
cof <- sort(ranicafe$Coffees, decreasing=T, na.rm=T)
cof[1]
cof <- sort(ranicafe$Coffees, decreasing=F)
cof[1]
# 모수와 통계량
ranicafe <- read.csv("cafedata.csv", header=T, stringsAsFactors = F)
head(ranicafe)
str(ranicafe)
head(ranicafe)
cof <- sort(ranicafe$Coffees, decreasing=F)
cof[1]
cof <- sort(ranicafe$Coffees, decreasing=T)
cof[1]
cof <- sort(as.numeric(ranicafe$Coffees), decreasing=T)
cof <- sort(as.numeric(ranicafe$Coffees), na.rm=T)
ranicafe$Coffees <- as.numeric(ranicafe$Coffees)
ranicafe <- read.csv("cafedata.csv", header=T, stringsAsFactors = F)
head(ranicafe)
str(ranicafe)
head(ranicafe)
ranicafe$Coffees <- as.numeric(ranicafe$Coffees)
ranicafe$Cof
# 모수와 통계량
ranicafe <- read.csv("cafedata.csv", header=T, stringsAsFactors = F)
head(ranicafe)
str(ranicafe)
head(ranicafe)
ranicafe$Coff <- as.numeric(ranicafe$Coffees)
ranicafe$Coff
sort(ranicafe$Coff)
sort(ranicafe$Coff, decreasing=T)
sort(ranicafe$Coff, decreasing=T)[1]
max(ranicafe$Coff)
max(ranicafe$Coff, na.rm=T)
min(ranicafe$Coff, na.rm=T)
# 줄기-잎 그래프
# 줄기: 자료의 구분점 (히스토그램 구분구간과 동일)
stem(ranicafe$Coff)
?stem()
# 히스토그램
hist(ranicafe$Coff)
# 평균과 중앙값
# 자료의 중심에 위치하여 전체 자료를 '대표'할 수 있는 값은 3가지 (각 데이터의 특색에 따라서 필요한 값이 다름)
# =>  최빈값,(산술)평균(mean,avg), 중앙값 (median)
# 이 중 평균: 무게중심,  중앙값: 순서상 중심 으로 간주
cof <- ranicafe$Coff
weight <- (1/length(cof))
sum(cof*weight)
sum(cof*weight, na.rm=T)
mean (cof)
mean (cof, na.rm=T)
weight <- (1/(length(cof)-1))
sum(cof*weight, na.rm=T)
mean (cof, na.rm=T)
# 평균과 중앙값
# 자료의 중심에 위치하여 전체 자료를 '대표'할 수 있는 값은 3가지 (각 데이터의 특색에 따라서 필요한 값이 다름)
# =>  최빈값,(산술)평균(mean,avg), 중앙값 (median)
# 이 중 평균: 무게중심,  중앙값: 순서상 중심 으로 간주
cof <- ranicafe$Coff ; na.rm(cof)
cof[cof == max(cof, na.rm=T)]
cof[cof == max(cof, na.rm=T)] <- 480
mean(cof, na.rm=T)
# 중앙값
length(cof)
# 중앙값
len <- length(cof, na.rm=T) - 1  # -1 은 NA 떄문에 사용된 것
len
# 중앙값
len <- length(cof) - 1  # -1 은 NA 떄문에 사용된 것
len
med.idx <- len/2
med.idx
med.idx <- floor(len/2)
med.idx
sort(cof)[med.idx]
med.idx <- (len+1)/2
med.idx
sort(cof)[med.idx]
height.m <- mean(height)
# 표준편차와 사분위수 범위
# 각 자료들이 평균에 대해 평균적으로 얼마나 떨어져 있을까?
# 제곱된 형태: 분산, 루트 씌워짐: 표준편차
height <- c(164,166,168,170,172,174,176)
height.m <- mean(height)
height.dev <- height - height.m
sum(height.dev)
h.m <- mean(height)
h.dev <- height - h.m ;
h.dev <- height - h.m ; h.dev
sum((h.dev)^2)
h.var <- sum((h.dev)^2)/2
h.var <- sum((h.dev)^2)/2 ; h.var
h.var <- sum((h.dev)^2)/length(height) ; h.var
h.stdev <- sqrt(h.var)
h.stdev <- sqrt(h.var) ; h.stdev
# 사실 R 에는 variance 와 stand.dev 를 구하는 함수가 존재함
var(height)
sd(height)
h.len <- length (height) -1
h.var <- sum((h.dev)^2)/h.len ; h.var
h.stdev <- sqrt(h.var) ; h.stdev
# 사분위수 Quartile
# 25%, 50%, 75%, 100% 값의 나열 (Q1 : Q4)
quantile(cof)
# 사분위수 Quartile
# 25%, 50%, 75%, 100% 값의 나열 (Q1 : Q4)
quantile(cof, na.rm=T)
# 사분위수 Quartile
# 0%, 25%, 50%, 75%, 100% 값의 나열 (25% = Q1, 100% = Q4)
qt <- quantile(cof, na.rm=T)
# 사분위수 Quartile
# 0%, 25%, 50%, 75%, 100% 값의 나열 (25% = Q1, 100% = Q4)
qt <- quantile(cof, na.rm=T) ; qt
# 사분위수 범위 (IQR, Inter Quartile Range) 중앙값을 포함하는 영역인 제 1 사분위수부터 제 3 사분위수 사이 길이
q1 <- qt[1]
# 사분위수 범위 (IQR, Inter Quartile Range) 중앙값을 포함하는 영역인 제 1 사분위수부터 제 3 사분위수 사이 길이
q1 <- qt[2] ; q1
q3 <- qt[4] ; q3
q3 - q1
IQR (cof)
IQR (cof, na.rm=T)
# boxplot 은 Q1~Q3 을 box 로 그리고 1.5*IQR 범위내의 최대, 최소 값을 각각 점선으로 연결하여 tail/수염을 그린다
# outlier 이상치는 Q2 - 1.5IQR, Q4 _ 1.5IQR 을 벗어난 값
boxplot(cars$dist)
qs <- quantile(cars$dist)
qs <- quantile(cars$dist) ; qs
iqr <- IQR(cars$dist, na.rm=T)
iqr <- IQR(cars$dist, na.rm=T) ; iqr
upperlim <- qs[4] + 1.5*iqr
upperlim <- qs[4] + 1.5*iqr ; upperlim
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
qs <- quantile(cars$dist, na.rm=T) ; qs
iqr <- IQR(cars$dist, na.rm=T) ; iqr
upperlim <- qs[4] + 1.5*iqr ; upperlim
lowerlim <- qs[2] - 1.5*iqr ; lowerlim
cars$dist[cars$dist > upperlim | cars$dist < lowerlim]
boxplot(cars$dist) $ outlier
str(boxplot(cars$dist))
summary(boxplot(cars$dist))
boxplot(cars$dist)$out
str(bp)
bp <- boxplot(cars$dist)
str(bp)
bp$out   #
ggplot(cars, aes(x=speed, y=dist)) +
geom_jitter()
ggplot(cars, aes(x=speed, y=dist)) +
geom_jitter() +
labs(title = "속도와 제동거리", x= "속도(mph)", y="제동거리(ft)")
ggplot(cars, aes(x=speed, y=dist)) +
geom_jitter(color="red") +
labs(title = "속도와 제동거리", x= "속도(mph)", y="제동거리(ft)")
ggplot(cars, aes(x=speed, y=dist)) +
geom_jitter(color="blue") +
labs(title = "속도와 제동거리", x= "속도(mph)", y="제동거리(ft)")
tableV5
ggplot(tableV5)+
geom_bar(stat="identity")
df_V45 <- as.data.frame(tableV5)
df_V5 <- as.data.frame(tableV5)
df_V5
df_V5 <- as.data.frame(tableV5, 출생아수 = var1, 빈도 = Freq)
df_V5
?as.data.frame
df_V5 <- data.frame(tableV5, 출생아수 = var1, 빈도 = Freq)
tableV5
barplot(tableV5, main="출생아(남자)별 빈도",
xlab = "출생아수", ylab="빈도")
df_V5 <- data.frame(tableV5)
df_V5
ggplot(df_V5, aes(x=Var1, y=Freq))+
geom_bar(stat="identity")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Var1))+
geom_bar(stat="identity")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Var1))+
geom_bar(stat="identity") +
scale_fill_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Freq))+
geom_bar(stat="identity") +
scale_fill_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Freq))+
geom_bar(stat="identity") +
scale_color_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Freq))+
geom_bar(stat="identity") +
scale_color_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Var1))+
geom_bar(stat="identity") +
scale_color_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Var1))+
geom_bar(stat="identity") +
scale_color_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Var1))+
geom_bar(stat="identity") +
scale_fill_gradient(low= "orange", high="yellow")
ggplot(df_V5, aes(x=Var1, y=Freq, fill=Var1))+
geom_bar(stat="identity")
qplot (pop$V2, geom="histogram")
hist(pop$V2, breaks=c(seq(0,90,10)), # 계급구간 customizing
right=F,  # right-closed = F -> 각 구간은 [a,b) 로 오른쪽구간이 열림 (default 는 (a,b] 형태이다)
main="연령별 분포", xlab="연령", ylab="빈도")
qplot(pop$V2, geom="histogram")
ggplot(pop$, aes(V2)) +
geom_histogram()
ggplot(pop$, aes(V2)) +
geom_histogram()
ggplot(pop, aes(V2)) +
geom_histogram()
ggplot(pop, aes(V2)) +
geom_histogram(aes(fill = count, binwidth = 5))
pop$V2
ggplot(pop, aes(V2)) +
geom_histogram(aes( binwidth = 5))
ggplot(pop, aes(V2)) +
geom_histogram(binwidth = 5)
ggplot(pop, aes(V2)) +
geom_histogram(binwidth = 5) +
sclae_fill_gradient ("count", low= "blue", high = "red")
