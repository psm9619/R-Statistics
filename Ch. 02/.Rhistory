# key & value -> Key must be Unique
# can consist of any data type
list1 <- list (name='Soomin', address='Daejeon', phone=c(010, 230))
list1
# key & value -> Key must be Unique
# can consist of any data type
list1 <- list (name='Soomin', address='Daejeon', phone=c( 010, 230))
# key & value -> Key must be Unique
# can consist of any data type
list1 <- list (name='Soomin', address='Daejeon', phone=c(111, 222))
list1
list1$naem
list1$name
list1[1:3]
# key & value -> Key must be Unique
# can consist of any data type
list1 <- list (name='Soomin', address='Daejeon',
phone=c(111, 222), age=24)
list1[1:3]
list1[1] ; list1[1:3]
list1$birth <- '1999' ; list1$birth; list1
# to add new value to existing key
list1$birth <- c('SSSSS')
list1
# to add new key&value
list1$birth <- '1999'  # simple as list$new_key <- new_value
list1$birth; list1
# to add new value to existing key
list1$name <- c('SSSSS')
list1
# key & value -> Key must be Unique
# can consist of any data type
list1 <- list (name='Soomin',   # similar to factors and group of data under each.
address='Daejeon',  # but different in that the length of data for each group can be different
phone=c(111, 222),  # while in matrix the num of rows for each column is always same
age=24)
# to extract certain group of values
list1$name  # list $ key
list1[1] ; list1[1:3]  # list[index]
# to add new key&value
list1$birth <- '1999'  # simple as list$new_key <- new_value
list1$birth; list1
# to add new value to existing key
list1$name <- c(list1$name, 'SSSSS')
list1
# to add new value to existing key
list1$name <- c(list1$name, 'S')
# to add new value to existing key
list1$name <- c(list1$name, 'S')
list1
list1$name <- c('SS')
list1$name
# to delete data
list1$birth <- NULL
# to delete data
list1$birth <- NULL ; list1
rm(list$age)
rm(list = list$age)
rm(list = ls())
# to delete data
list1$birth <- NULL ; list1$birth
list1 <- list (name='Soomin',   # similar to factors and group of data under each.
address='Daejeon',  # but different in that the length of data for each group can be different
phone=c(111, 222),  # while in matrix the num of rows for each column is always same
age=24)
# to extract certain group of values
list1$name  # list $ key
list1[1] ; list1[1:3]  # list[index]
# to add new key&value
list1$birth <- '1999'  # simple as list$new_key <- new_value
list1$birth; list1
# to add new value to existing key
list1$name <- c( list1$name , 'S')
list1  # returns $name [1] "Soomin"  "S"
list1$name <- c('SS')  # if don't include the original value inside the newly inserted value group
list1$name  # returns only the newly added value
# to delete data
list1$birth <- NULL ; list1$birth
mat1 <- matrix(c(1,2,3,4))
mat1
mat2 <- matrix(c(1,2,3,4), nrow=2) ; mat2
mat3 <- matrix(c(1,2,3,4), nrow=2, byrow=T)
mat3 <- matrix(c(1,2,3,4), nrow=2, byrow=T) ; mat3
mat3[1,1]
mat3[1]
mat3[,1]
mat3[1,]
mat4 <- matrix(seq(1,9), nrow=3, byrow=T) ; mat4
mat5 <- matrix(seq(1,9), nrow=2)
mat5 <- rbind(mat4, c(10,11,12))
mat4 <- matrix(seq(1,10), nrow=2, byrow=T) ; mat4
# to extend the matrix
mat5 <- rbind(mat4, c(11,12,13,14))  # bind extra data via row
# to extend the matrix
mat5 <- rbind(mat4, c(11,12))  # bind extra data via row
mat4 <- matrix(seq(1,10), nrow=2, byrow=T) ; mat4
# to extend the matrix
mat5 <- rbind(mat4, c(11,12,13,14,15))  # bind extra data via row
colnames(mat4) <- c("a":"d")
colnames(mat4) <- c("a","b","c","d","e")
# to give names to the column of matrix
colnames(mat4) <- c("a","b","c","d","e") ; mat4
mat4$a
# making sequence in R
seq(from= -4, to = 3, by =1 | length.out3)
# making sequence in R
seq(from= -4, to = 3, by =1 | length.out=3)
# making sequence in R
seq(from= -4, to = 3 | length.out=3)
# making sequence in R
seq(from= -4, to = 3, length.out=3)
# factor
# 의미가 중요한 질적자료를 위해 사용
# factor(x, levels = c(...), ordered =T/F)
x <- 1:5
# factor
# 의미가 중요한 질적자료를 위해 사용
# factor(x, levels = c(...), ordered =T/F)
x <- 1:5 ; x
factor (x, levels = c(1:4))
factor (x, levels = c(5:!))
factor (x, levels = c(5:1))
factor (x, levels = c(5:1), label = c('a','b','c','d','e'))
factor (x, levels = c(5:1), label = c('a','b','c','d','e'), ordered=F)
factor (x, levels = c(5:1), label = c('a','b','d','e', 'z'), ordered=F)
factor (x, levels = c(5:1), label = c('a','b','d','e', 'z'), ordered=T)
a <- c('일', '월', '화','수', '목','금','토')
factor (a, ordered=T)
factor (a, ordered=F)
factor (a, levels = c(1:7), ordered=T)
factor (a, levels = a,ordered=T)
factor (a, levels = a)
factor (a, ordered =T)
week <- factor (c(1:7), levels = c(1:7), labels = a)
week
week <- factor (c(1:7), levels = c(1:7), labels = a, ordered = T)
week
week(3)
factor(week)
gender <- factor (c("M","F","M"))
name <- c('철수','영희', '길동')
age <- c(21,20,31)
gender <- factor (c("M","F","M"))
character <- data.frame(name, age, gender)
str(character)
character
character$name
character$gender
charactr[1,]
character[1,]
character[,2]
character[3,1]
setwd("D:/Workspace/R_Statistics/Ch. 02")
data <- read.csv("2010년 인구사항.csv", headr=F, na.strings=c("."))
data <- read.table("2010년 인구사항.csv", headr=F, na.strings=c("."))
data <- read.csv("2010년 인구사항.csv", header=F, na.strings=c("."))
data <- read.table("2010년 인구사항.csv", header=F, na.strings=c("."))
data <- read.txt("2010년 인구사항.csv", header=F, na.strings=c("."))
data <- read.csv("2010년 인구사항.csv", header=F, na.strings=c("."))
data <- read.csv("2010 인구사항.csv", header=F, na.strings=c("."))
str(data)
data$v1
data$V3 <- factor(data$V3, levels = 1:14,
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
data$V1 <- factor(data$V1, levels =c(1,2),
labels = c("남자", "여자"))
data$V3 <- factor(data$V3, levels = c(1:14),
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
data$V3 <- factor(data$V3, levels = 1:14,
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
data$V3 <- factor(data$V3, levels = 1:14,
labels = c("가구주", "가구주의 배우자", "자녀",
"자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자",
"증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자",
"형제자매의 자녀, 그 배우자",
"부모의 형제자매, 그 배우자", "기타 친인척",
"그 외 동거인"))
data4$V4 <- factor(data$V4, levels = 1:8,
labels = c("안 받았음", "초등학교", "중학교",
"고등학교", "대학~4년제 미만",
"대학~4년제 이상", "석사과정", "박사과정"))
data$V4 <- factor(data$V4, levels = 1:8,
labels = c("안 받았음", "초등학교", "중학교",
"고등학교", "대학~4년제 미만",
"대학~4년제 이상", "석사과정", "박사과정"))
str(data)
save.image("data.rda")
mat6 <- cbind(mat4, c(1)) # bind extra data via column (num data should be a multiple of num data in col)
mat4 <- matrix(seq(1,10), nrow=2, byrow=T) ; mat4
# to extend the matrix by adding extra
mat5 <- rbind(mat4, c(11,12,13,14,15))  # bind data via row (num data should be a multiple of num data in row)
mat6 <- cbind(mat4, c(1)) # bind extra data via column (num data should be a multiple of num data in col)
mat5
mat6
mat6 <- cbind(mat4, c(1,2)) # bind extra data via column (num data should be a multiple of num data in col)
# to give names to the column of matrix
colnames(mat4) <- c("a","b","c","d","e") ; mat4
mat4$a
mat4[2,]
mat4[2,] ; mat4[2,2]
mat4[2,] ; mat4[2,2] ; b
mat4[2,] ; mat4[2,2] ; b[]
b[,2]
b[1,]
# IMPORTANT: Matrix is only for a same type of data
# if a set of data in different types is given, either an error or automatical conversion
mat1 <- matrix(c(1,2,3,4, "a","b") )
# IMPORTANT: Matrix is only for a same type of data
# if a set of data in different types is given, either an error or automatical conversion
mat <- matrix(c(1,2,3,4, "a","b") ) ; mat
array <- array(c(1:12), dim=c(2,2,3))
source('~/.active-rstudio-document', echo=TRUE)
arr1 <- array(c(1:12), dim=c(4,3))
arr1
arr2 <- array(c(1:12), dim=c(2,2,2))
arr2
arr2 <- array(c(1:12), dim=c(2,2,3))
arr2
arr3
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
arr2[1,1,2]
arr2[1,1]
arr2[1,1,]
arr2[1,,]
arr2[,,2]
sales
no <- c(1:4)
name <- c("A", "B","C", "D")
price <- c(500:503)
qty <- c(4:1)
sales <- data.frame(NO=no, NAME=name, PRICE=price,QTY=qty)
sales
str(sales)
class(sales)
str(sales)  # returns structure of data frame
sales$NAME
